{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flatten = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nfunction flatten(input) {\n  const {\n    indices\n  } = this;\n  const existing = indices.get(input);\n  if (existing) return [existing];\n  if (input === undefined) return utils_js_1.UNDEFINED;\n  if (input === null) return utils_js_1.NULL;\n  if (Number.isNaN(input)) return utils_js_1.NAN;\n  if (input === Number.POSITIVE_INFINITY) return utils_js_1.POSITIVE_INFINITY;\n  if (input === Number.NEGATIVE_INFINITY) return utils_js_1.NEGATIVE_INFINITY;\n  if (input === 0 && 1 / input < 0) return utils_js_1.NEGATIVE_ZERO;\n  const index = this.index++;\n  indices.set(input, index);\n  stringify.call(this, input, index);\n  return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n  const {\n    deferred,\n    plugins,\n    postPlugins\n  } = this;\n  const str = this.stringified;\n  const stack = [[input, index]];\n  while (stack.length > 0) {\n    const [input, index] = stack.pop();\n    const partsForObj = obj => Object.keys(obj).map(k => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`).join(\",\");\n    let error = null;\n    switch (typeof input) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        str[index] = JSON.stringify(input);\n        break;\n      case \"bigint\":\n        str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n        break;\n      case \"symbol\":\n        {\n          const keyFor = Symbol.keyFor(input);\n          if (!keyFor) {\n            error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n          } else {\n            str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n          }\n          break;\n        }\n      case \"object\":\n        {\n          if (!input) {\n            str[index] = `${utils_js_1.NULL}`;\n            break;\n          }\n          const isArray = Array.isArray(input);\n          let pluginHandled = false;\n          if (!isArray && plugins) {\n            for (const plugin of plugins) {\n              const pluginResult = plugin(input);\n              if (Array.isArray(pluginResult)) {\n                pluginHandled = true;\n                const [pluginIdentifier, ...rest] = pluginResult;\n                str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                if (rest.length > 0) {\n                  str[index] += `,${rest.map(v => flatten.call(this, v)).join(\",\")}`;\n                }\n                str[index] += \"]\";\n                break;\n              }\n            }\n          }\n          if (!pluginHandled) {\n            let result = isArray ? \"[\" : \"{\";\n            if (isArray) {\n              for (let i = 0; i < input.length; i++) result += (i ? \",\" : \"\") + (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n              str[index] = `${result}]`;\n            } else if (input instanceof Date) {\n              str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n            } else if (input instanceof URL) {\n              str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n            } else if (input instanceof RegExp) {\n              str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n            } else if (input instanceof Set) {\n              if (input.size > 0) {\n                str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input].map(val => flatten.call(this, val)).join(\",\")}]`;\n              } else {\n                str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n              }\n            } else if (input instanceof Map) {\n              if (input.size > 0) {\n                str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input].flatMap(([k, v]) => [flatten.call(this, k), flatten.call(this, v)]).join(\",\")}]`;\n              } else {\n                str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n              }\n            } else if (input instanceof Promise) {\n              str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n              deferred[index] = input;\n            } else if (input instanceof Error) {\n              str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n              if (input.name !== \"Error\") {\n                str[index] += `,${JSON.stringify(input.name)}`;\n              }\n              str[index] += \"]\";\n            } else if (Object.getPrototypeOf(input) === null) {\n              str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n            } else if (isPlainObject(input)) {\n              str[index] = `{${partsForObj(input)}}`;\n            } else {\n              error = new Error(\"Cannot encode object with prototype\");\n            }\n          }\n          break;\n        }\n      default:\n        {\n          const isArray = Array.isArray(input);\n          let pluginHandled = false;\n          if (!isArray && plugins) {\n            for (const plugin of plugins) {\n              const pluginResult = plugin(input);\n              if (Array.isArray(pluginResult)) {\n                pluginHandled = true;\n                const [pluginIdentifier, ...rest] = pluginResult;\n                str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                if (rest.length > 0) {\n                  str[index] += `,${rest.map(v => flatten.call(this, v)).join(\",\")}`;\n                }\n                str[index] += \"]\";\n                break;\n              }\n            }\n          }\n          if (!pluginHandled) {\n            error = new Error(\"Cannot encode function or unexpected type\");\n          }\n        }\n    }\n    if (error) {\n      let pluginHandled = false;\n      if (postPlugins) {\n        for (const plugin of postPlugins) {\n          const pluginResult = plugin(input);\n          if (Array.isArray(pluginResult)) {\n            pluginHandled = true;\n            const [pluginIdentifier, ...rest] = pluginResult;\n            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n            if (rest.length > 0) {\n              str[index] += `,${rest.map(v => flatten.call(this, v)).join(\",\")}`;\n            }\n            str[index] += \"]\";\n            break;\n          }\n        }\n      }\n      if (!pluginHandled) {\n        throw error;\n      }\n    }\n  }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join(\"\\0\");\nfunction isPlainObject(thing) {\n  const proto = Object.getPrototypeOf(thing);\n  return proto === Object.prototype || proto === null || Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","flatten","utils_js_1","require","input","indices","existing","get","undefined","UNDEFINED","NULL","Number","isNaN","NAN","POSITIVE_INFINITY","NEGATIVE_INFINITY","NEGATIVE_ZERO","index","set","stringify","call","deferred","plugins","postPlugins","str","stringified","stack","length","pop","partsForObj","obj","keys","map","k","join","error","JSON","TYPE_BIGINT","keyFor","Symbol","Error","TYPE_SYMBOL","isArray","Array","pluginHandled","plugin","pluginResult","pluginIdentifier","rest","v","result","i","HOLE","Date","TYPE_DATE","getTime","URL","TYPE_URL","href","RegExp","TYPE_REGEXP","source","flags","Set","size","TYPE_SET","val","Map","TYPE_MAP","flatMap","Promise","TYPE_PROMISE","TYPE_ERROR","message","name","getPrototypeOf","TYPE_NULL_OBJECT","isPlainObject","objectProtoNames","getOwnPropertyNames","prototype","sort","thing","proto"],"sources":["D:/perpus/frontendd/node_modules/turbo-stream/dist/flatten.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nfunction flatten(input) {\n    const { indices } = this;\n    const existing = indices.get(input);\n    if (existing)\n        return [existing];\n    if (input === undefined)\n        return utils_js_1.UNDEFINED;\n    if (input === null)\n        return utils_js_1.NULL;\n    if (Number.isNaN(input))\n        return utils_js_1.NAN;\n    if (input === Number.POSITIVE_INFINITY)\n        return utils_js_1.POSITIVE_INFINITY;\n    if (input === Number.NEGATIVE_INFINITY)\n        return utils_js_1.NEGATIVE_INFINITY;\n    if (input === 0 && 1 / input < 0)\n        return utils_js_1.NEGATIVE_ZERO;\n    const index = this.index++;\n    indices.set(input, index);\n    stringify.call(this, input, index);\n    return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n    const { deferred, plugins, postPlugins } = this;\n    const str = this.stringified;\n    const stack = [[input, index]];\n    while (stack.length > 0) {\n        const [input, index] = stack.pop();\n        const partsForObj = (obj) => Object.keys(obj)\n            .map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`)\n            .join(\",\");\n        let error = null;\n        switch (typeof input) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                str[index] = JSON.stringify(input);\n                break;\n            case \"bigint\":\n                str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n                break;\n            case \"symbol\": {\n                const keyFor = Symbol.keyFor(input);\n                if (!keyFor) {\n                    error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n                }\n                else {\n                    str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n                }\n                break;\n            }\n            case \"object\": {\n                if (!input) {\n                    str[index] = `${utils_js_1.NULL}`;\n                    break;\n                }\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    let result = isArray ? \"[\" : \"{\";\n                    if (isArray) {\n                        for (let i = 0; i < input.length; i++)\n                            result +=\n                                (i ? \",\" : \"\") +\n                                    (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n                        str[index] = `${result}]`;\n                    }\n                    else if (input instanceof Date) {\n                        str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n                    }\n                    else if (input instanceof URL) {\n                        str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n                    }\n                    else if (input instanceof RegExp) {\n                        str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n                    }\n                    else if (input instanceof Set) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input]\n                                .map((val) => flatten.call(this, val))\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n                        }\n                    }\n                    else if (input instanceof Map) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input]\n                                .flatMap(([k, v]) => [\n                                flatten.call(this, k),\n                                flatten.call(this, v),\n                            ])\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n                        }\n                    }\n                    else if (input instanceof Promise) {\n                        str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n                        deferred[index] = input;\n                    }\n                    else if (input instanceof Error) {\n                        str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n                        if (input.name !== \"Error\") {\n                            str[index] += `,${JSON.stringify(input.name)}`;\n                        }\n                        str[index] += \"]\";\n                    }\n                    else if (Object.getPrototypeOf(input) === null) {\n                        str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n                    }\n                    else if (isPlainObject(input)) {\n                        str[index] = `{${partsForObj(input)}}`;\n                    }\n                    else {\n                        error = new Error(\"Cannot encode object with prototype\");\n                    }\n                }\n                break;\n            }\n            default: {\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    error = new Error(\"Cannot encode function or unexpected type\");\n                }\n            }\n        }\n        if (error) {\n            let pluginHandled = false;\n            if (postPlugins) {\n                for (const plugin of postPlugins) {\n                    const pluginResult = plugin(input);\n                    if (Array.isArray(pluginResult)) {\n                        pluginHandled = true;\n                        const [pluginIdentifier, ...rest] = pluginResult;\n                        str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                        if (rest.length > 0) {\n                            str[index] += `,${rest\n                                .map((v) => flatten.call(this, v))\n                                .join(\",\")}`;\n                        }\n                        str[index] += \"]\";\n                        break;\n                    }\n                }\n            }\n            if (!pluginHandled) {\n                throw error;\n            }\n        }\n    }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype)\n    .sort()\n    .join(\"\\0\");\nfunction isPlainObject(thing) {\n    const proto = Object.getPrototypeOf(thing);\n    return (proto === Object.prototype ||\n        proto === null ||\n        Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}